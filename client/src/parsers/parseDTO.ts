import { Person, Task } from "../types";

// This helper method was largely generated by ChatGPT
export function parseTaskDTO(taskString: String): Task {
    const taskRegex = /TaskDTO\[(name=(.*?)), costs=(\d+), preferredAssignee=PersonDTO\[(name=(.*?)), availabilityAssignment=\{(.*?)\}\], isPreferredFixed=(true|false), lastDoneAt=(\d+), isRepeated=(true|false), minRepeatInterval=(\d+), maxRepeatInterval=(\d+)\]/;

    const match = taskString.match(taskRegex);
    if (!match) {
        throw new Error("Invalid input string format.");
    }

    // Extract matched groups
    const [, , name, costs, , preferredAssigneeName, availabilityAssignmentStr, isPreferredFixed, lastDoneAt , isRepeated, minRepeatInterval, maxRepeatInterval] = match;

    // Convert costs and intervals to numbers
    const parsedCosts = parseInt(costs, 10);
    const parsedLastDoneAt = parseInt(lastDoneAt, 10);
    const parsedMinRepeatInterval = parseInt(minRepeatInterval, 10);
    const parsedMaxRepeatInterval = parseInt(maxRepeatInterval, 10);

    // Construct the Person object
    const preferredAssignee: Person = parsePersonDTO(`PersonDTO\[name=${preferredAssigneeName}, availabilityAssignment=\{${availabilityAssignmentStr}\}\]`)

    // Construct the Task object
    const task: Task = {
        name: name,
        costs: parsedCosts,
        preferredAssignee: preferredAssignee,
        isPreferredFixed: isPreferredFixed === "true",
        lastDoneAt: parsedLastDoneAt, 
        isRepeated: isRepeated === "true",
        minRepeatInterval: parsedMinRepeatInterval,
        maxRepeatInterval: parsedMaxRepeatInterval,
    };

    return task;
}

export function parsePersonDTO(personString: String): Person {
    const personRegex = /PersonDTO\[(name=(.*?)), availabilityAssignment=\{(.*?)\}\]/

    const match = personString.match(personRegex);
    if (!match) {
        throw new Error("Invalid input string format.");
    }

    // Extract matched groups
    const [, , name, availabilityAssignmentStr] = match;

    // Parse availabilityAssignment (converts '1=1, 2=8' into a Map)
    const availabilityAssignmentMap = new Map<number, number>();
    const availabilityEntries = availabilityAssignmentStr.split(',').map(entry => entry.split('='));
    availabilityEntries.forEach(([key, value]) => {
        availabilityAssignmentMap.set(parseInt(key), parseInt(value));
    });

    const person: Person = {
        name: name,
        availabilityAssignment: availabilityAssignmentMap
    }

    return person;
}
